import argparse


def make_train_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--use_cuda", action='store_true', default=False)
    parser.add_argument("--model", type=str, default="xlm-roberta-base", choices=["bert-base-multilingual-cased", "xlm-roberta-base"])
    parser.add_argument("--architecture", type=str, default="roberta", choices=["bert", "roberta"])
    parser.add_argument("--src_train_filename", type=str)
    parser.add_argument("--tgt_train_filename", type=str)
    parser.add_argument("--labels_train_filename", type=str)
    parser.add_argument("--word_labels_train_filename", type=str, default=None)
    parser.add_argument("--src_val_filename", type=str)
    parser.add_argument("--tgt_val_filename", type=str)
    parser.add_argument("--labels_val_filename", type=str)
    parser.add_argument("--word_labels_val_filename", type=str, default=None)
    parser.add_argument("--src_test_filename", type=str)
    parser.add_argument("--tgt_test_filename", type=str)
    parser.add_argument("--labels_test_filename", type=str)
    parser.add_argument("--word_labels_test_filename", type=str, default=None)
    parser.add_argument("--batch_size", type=int, default=8)
    parser.add_argument("--seed", type=int, default=None)
    parser.add_argument("--model_path", type=str)
    parser.add_argument("--learning_rate", type=float, default=3e-5)
    parser.add_argument("--epochs", type=int, default=10)
    parser.add_argument("--class_weighting", default=False, action='store_true')
    parser.add_argument("--val_loss", default="f1", choices=["f1", "mcc", "mse", "pearson"])
    parser.add_argument("--num_labels", default=2, type=int)
    parser.add_argument("--target_only", action='store_true', default=False)
    parser.add_argument("--clip_grad", default=1., type=float)
    parser.add_argument("--warmup_percentage", default=0., type=float, help="Percentage of iterations for warmup")
    parser.add_argument("--weight_decay", default=0., type=float,)
    return parser


def make_attributions_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--use_cuda", action='store_true', default=False)
    parser.add_argument("--src_train_filename", type=str)
    parser.add_argument("--tgt_train_filename", type=str)
    parser.add_argument("--labels_train_filename", type=str)
    parser.add_argument("--word_labels_train_filename", type=str, default=None)
    parser.add_argument("--src_val_filename", type=str)
    parser.add_argument("--tgt_val_filename", type=str)
    parser.add_argument("--labels_val_filename", type=str)
    parser.add_argument("--word_labels_val_filename", type=str, default=None)
    parser.add_argument("--src_test_filename", type=str)
    parser.add_argument("--tgt_test_filename", type=str)
    parser.add_argument("--labels_test_filename", type=str)
    parser.add_argument("--word_labels_test_filename", type=str, default=None)
    parser.add_argument("--num_layers", default=14, type=int)
    parser.add_argument("--num_labels", default=2, type=int)
    parser.add_argument("--model_path", type=str)
    parser.add_argument("--architecture", type=str, default="roberta", choices=["bert", "roberta"])
    parser.add_argument("--steps", default=50, type=int)
    parser.add_argument("--input_only", default=False, action="store_true")
    parser.add_argument("--save", default=None, type=str)
    parser.add_argument("--data_split", default="valid", choices=["test", "valid"])
    parser.add_argument("--batch_size", default=None, type=int)
    parser.add_argument("--explainer", default="schulz")
    parser.add_argument("--lr", default=1e-1, type=float)
    parser.add_argument("--aux_loss_weight", default=10, type=int)
    parser.add_argument("--seed", default=None, type=int)
    return parser
